version: '3.8'
networks:
  dev:
    driver: bridge

volumes:
  pgdata:

services:
  db:
    image: 'postgres:latest'
    container_name: valentine-db
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 1.5G
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dev
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  api:
    build: ./apps/server
    container_name: valentine-server
    restart: always
    ports:
      - '${BACKEND_PORT}:8080'
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=5432
      - COOKIE_SECRET=${COOKIE_SECRET}
    networks:
      - dev
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/api/health']
      interval: 30s
      timeout: 10s
      retries: 5

  client:
    build: ./apps/client
    container_name: valentine-client
    restart: always
    ports:
      - '${FRONTEND_PORT}:3000'
    depends_on:
      - api
    environment:
      - API_BASE_URL=${API_BASE_URL}
      - WEBSITE_BASE_URL=${WEBSITE_BASE_URL}
    networks:
      - dev
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'
